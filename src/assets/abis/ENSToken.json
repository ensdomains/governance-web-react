{
  "address": "0x2a8491354b023da5378b3Fe1Da86F1cd2089412d",
  "abi":[
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_seam",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seam",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe72ea71b697d6037a26568042af01b405942b2540b55430971c848a940d67ec3",
  "receipt": {
    "to": null,
    "from": "0x17A61590714ccdbB661fa43acC39493D6B4139B1",
    "contractAddress": "0x3096cF6f2278e4Bd3a6d28faE2eA1bd0b7bFC558",
    "transactionIndex": 0,
    "gasUsed": "4385820",
    "logsBloom": "0x00000000000000000000000000000000000000000000004000820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000001010000000000000000000000000000000000020000000000000000000a00000000000000800000000010000000400000000000000001000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000004000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000020000000000000000000000000000000",
    "blockHash": "0xd35aa966d4843cb5a188847a09df8a5bac5001b0ef4bf44b2e2ad11c647a1a78",
    "transactionHash": "0xe72ea71b697d6037a26568042af01b405942b2540b55430971c848a940d67ec3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13548824,
        "transactionHash": "0xe72ea71b697d6037a26568042af01b405942b2540b55430971c848a940d67ec3",
        "address": "0x3096cF6f2278e4Bd3a6d28faE2eA1bd0b7bFC558",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000017a61590714ccdbb661fa43acc39493d6b4139b1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd35aa966d4843cb5a188847a09df8a5bac5001b0ef4bf44b2e2ad11c647a1a78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13548824,
        "transactionHash": "0xe72ea71b697d6037a26568042af01b405942b2540b55430971c848a940d67ec3",
        "address": "0x3096cF6f2278e4Bd3a6d28faE2eA1bd0b7bFC558",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000017a61590714ccdbb661fa43acc39493d6b4139b1"
        ],
        "data": "0x0000000000000000000000000000000000000000003e09de2596099dd8ad4300",
        "logIndex": 0,
        "blockHash": "0xd35aa966d4843cb5a188847a09df8a5bac5001b0ef4bf44b2e2ad11c647a1a78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13548824,
        "transactionHash": "0xe72ea71b697d6037a26568042af01b405942b2540b55430971c848a940d67ec3",
        "address": "0x3096cF6f2278e4Bd3a6d28faE2eA1bd0b7bFC558",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003096cf6f2278e4bd3a6d28fae2ea1bd0b7bfc558"
        ],
        "data": "0x00000000000000000000000000000000000000000014adf4b73203350b52bd00",
        "logIndex": 0,
        "blockHash": "0xd35aa966d4843cb5a188847a09df8a5bac5001b0ef4bf44b2e2ad11c647a1a78"
      }
    ],
    "blockNumber": 13548824,
    "cumulativeGasUsed": "4385820",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "74999999999999998618845952",
    "25000000000000001381154048",
    1651622400
  ],
  "solcInputHash": "663078e3b2c4926632082f376a43cc4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimPeriodEnds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriodEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumMintInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An ERC20 token for ENS.      Besides the addition of voting capabilities, we make a couple of customisations:       - Airdrop claim functionality via `claimTokens`. At creation time the tokens that         should be available for the airdrop are transferred to the token contract address;         airdrop claims are made from this balance.       - Support for the owner (the DAO) to mint new tokens, at up to 2% PA.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"claimTokens(uint256,address,bytes32[])\":{\"details\":\"Claims airdropped tokens.\",\"params\":{\"amount\":\"The amount of the claim being made.\",\"delegate\":\"The address the tokenholder wants to delegate their votes to.\",\"merkleProof\":\"A merkle proof proving the claim is valid.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_claimPeriodEnds\":\"The timestamp at which tokens are no longer claimable.\",\"airdropSupply\":\"The number of tokens to reserve for the airdrop.\",\"freeSupply\":\"The number of tokens to issue to the contract deployer.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isClaimed(uint256)\":{\"details\":\"Returns true if the claim at the given index in the merkle tree has already been made.\",\"params\":{\"index\":\"The index into the merkle tree.\"}},\"mint(address,uint256)\":{\"details\":\"Mints new tokens. Can only be executed every `minimumMintInterval`, by the owner, and cannot      exceed `mintCap / 10000` fraction of the current total supply.\",\"params\":{\"amount\":\"The quantity of tokens to mint.\",\"dest\":\"The address to mint the new tokens to.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMerkleRoot(bytes32)\":{\"details\":\"Sets the merkle root. Only callable if the root is not yet set.\",\"params\":{\"_merkleRoot\":\"The merkle root to set.\"}},\"sweep(address)\":{\"details\":\"Allows the owner to sweep unclaimed tokens after the claim period ends.\",\"params\":{\"dest\":\"The address to sweep the tokens to.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ENSToken.sol\":\"ENSToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        return _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x5ededcc80abc4797cdad3c0344c510a6aee060460f3fb8ec5983c4cfaeaef5e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x2d5ac2826ea6cb4493de1e1d1f07c7104e39fa508ccc8af5d712028821d73416\",\"license\":\"MIT\"},\"contracts/ENSToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\n/**\\n * @dev An ERC20 token for ENS.\\n *      Besides the addition of voting capabilities, we make a couple of customisations:\\n *       - Airdrop claim functionality via `claimTokens`. At creation time the tokens that\\n *         should be available for the airdrop are transferred to the token contract address;\\n *         airdrop claims are made from this balance.\\n *       - Support for the owner (the DAO) to mint new tokens, at up to 2% PA.\\n */\\ncontract ENSToken is ERC20, ERC20Permit, ERC20Votes, Ownable {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    uint256 public constant minimumMintInterval = 365 days;\\n    uint256 public constant mintCap = 200; // 2%\\n\\n    bytes32 public merkleRoot;\\n    uint256 public nextMint; // Timestamp\\n    uint256 public claimPeriodEnds; // Timestamp\\n    BitMaps.BitMap private claimed;\\n\\n    event MerkleRootChanged(bytes32 merkleRoot);\\n    event Claim(address indexed claimant, uint256 amount);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param freeSupply The number of tokens to issue to the contract deployer.\\n     * @param airdropSupply The number of tokens to reserve for the airdrop.\\n     * @param _claimPeriodEnds The timestamp at which tokens are no longer claimable.\\n     */\\n    constructor(\\n        uint256 freeSupply,\\n        uint256 airdropSupply,\\n        uint256 _claimPeriodEnds\\n    )\\n        ERC20(\\\"Ethereum Name Service\\\", \\\"ENS\\\")\\n        ERC20Permit(\\\"Ethereum Name Service\\\")\\n    {\\n        _mint(msg.sender, freeSupply);\\n        _mint(address(this), airdropSupply);\\n        claimPeriodEnds = _claimPeriodEnds;\\n        nextMint = block.timestamp + minimumMintInterval;\\n    }\\n\\n    /**\\n     * @dev Claims airdropped tokens.\\n     * @param amount The amount of the claim being made.\\n     * @param delegate The address the tokenholder wants to delegate their votes to.\\n     * @param merkleProof A merkle proof proving the claim is valid.\\n     */\\n    function claimTokens(uint256 amount, address delegate, bytes32[] calldata merkleProof) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, amount));\\n        (bool valid, uint256 index) = MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n        require(valid, \\\"ENS: Valid proof required.\\\");\\n        require(!isClaimed(index), \\\"ENS: Tokens already claimed.\\\");\\n        \\n        claimed.set(index);\\n        emit Claim(msg.sender, amount);\\n\\n        _delegate(msg.sender, delegate);\\n        _transfer(address(this), msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to sweep unclaimed tokens after the claim period ends.\\n     * @param dest The address to sweep the tokens to.\\n     */\\n    function sweep(address dest) external onlyOwner {\\n        require(block.timestamp > claimPeriodEnds, \\\"ENS: Claim period not yet ended\\\");\\n        _transfer(address(this), dest, balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the claim at the given index in the merkle tree has already been made.\\n     * @param index The index into the merkle tree.\\n     */\\n    function isClaimed(uint256 index) public view returns (bool) {\\n        return claimed.get(index);\\n    }\\n\\n    /**\\n     * @dev Sets the merkle root. Only callable if the root is not yet set.\\n     * @param _merkleRoot The merkle root to set.\\n     */\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        require(merkleRoot == bytes32(0), \\\"ENS: Merkle root already set\\\");\\n        merkleRoot = _merkleRoot;\\n        emit MerkleRootChanged(_merkleRoot);\\n    }\\n\\n    /**\\n     * @dev Mints new tokens. Can only be executed every `minimumMintInterval`, by the owner, and cannot\\n     *      exceed `mintCap / 10000` fraction of the current total supply.\\n     * @param dest The address to mint the new tokens to.\\n     * @param amount The quantity of tokens to mint.\\n     */\\n    function mint(address dest, uint256 amount) external onlyOwner {\\n        require(amount <= (totalSupply() * mintCap) / 10000, \\\"ENS: Mint exceeds maximum amount\\\");\\n        require(block.timestamp >= nextMint, \\\"ENS: Cannot mint yet\\\");\\n\\n        nextMint = block.timestamp + minimumMintInterval;\\n        _mint(dest, amount);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc685297fce557f3065f6110799b199e3c646d5a170c58f829bcbd102970ccad6\",\"license\":\"MIT\"},\"contracts/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/cryptography/MerkleProof.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool, uint256) {\\n        bytes32 computedHash = leaf;\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            index *= 2;\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n                index += 1;\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return (computedHash == root, index);\\n    }\\n}\",\"keccak256\":\"0xa85f98445371133a7b2b52f81beb7a069a866605bdf81e09263aa15e53198e92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120908152503480156200003a57600080fd5b5060405162005bf838038062005bf8833981810160405281019062000060919062000d50565b6040518060400160405280601581526020017f457468657265756d204e616d6520536572766963650000000000000000000000815250806040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280601581526020017f457468657265756d204e616d65205365727669636500000000000000000000008152506040518060400160405280600381526020017f454e53000000000000000000000000000000000000000000000000000000000081525081600390805190602001906200015192919062000c89565b5080600490805190602001906200016a92919062000c89565b50505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260c081815250508160e081815250504660a08181525050620001d58184846200025760201b60201c565b608081815250508061010081815250505050505050506200020b620001ff6200029360201b60201c565b6200029b60201b60201c565b6200021d33846200036160201b60201c565b6200022f30836200036160201b60201c565b80600c819055506301e133804262000248919062000fbb565b600b8190555050505062001293565b600083838346306040516020016200027495949392919062000e7b565b6040516020818303038152906040528051906020012090509392505050565b600033905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200037882826200037c60201b620018ff1760201c565b5050565b6200039382826200043a60201b6200198c1760201c565b620003a3620005b360201b60201c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16620003d1620005d760201b60201c565b111562000415576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200040c9062000ed8565b60405180910390fd5b620004346008620005e160201b62001aec1783620005f960201b60201c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004a49062000f3e565b60405180910390fd5b620004c160008383620008aa60201b60201c565b8060026000828254620004d5919062000fbb565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200052c919062000fbb565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000593919062000f60565b60405180910390a3620005af60008383620008af60201b60201c565b5050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b6000600254905090565b60008183620005f1919062000fbb565b905092915050565b600080600085805490509050600081146200066e57856001826200061e919062001018565b815481106200063257620006316200112f565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1662000671565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692506200069d83858760201c565b9150600081118015620006f657504386600183620006bc919062001018565b81548110620006d057620006cf6200112f565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16145b1562000797576200071282620008cc60201b62001b021760201c565b8660018362000722919062001018565b815481106200073657620007356200112f565b5b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550620008a1565b856040518060400160405280620007b9436200093a60201b62001b6d1760201c565b63ffffffff168152602001620007da85620008cc60201b62001b021760201c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b50935093915050565b505050565b620008c78383836200099060201b62001bc01760201c565b505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801682111562000932576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009299062000efa565b60405180910390fd5b819050919050565b600063ffffffff801682111562000988576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200097f9062000f1c565b60405180910390fd5b819050919050565b620009a8838383620009e060201b62001beb1760201c565b620009db620009bd84620009e560201b60201c565b620009ce84620009e560201b60201c565b8362000a4e60201b60201c565b505050565b505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801562000a8b5750600081115b1562000c6c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000b7e5760008062000b25600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002062000c7160201b62001bf01785620005f960201b60201c565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405162000b7392919062000f7d565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161462000c6b5760008062000c12600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020620005e160201b62001aec1785620005f960201b60201c565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405162000c6092919062000f7d565b60405180910390a250505b5b505050565b6000818362000c81919062001018565b905092915050565b82805462000c97906200109b565b90600052602060002090601f01602090048101928262000cbb576000855562000d07565b82601f1062000cd657805160ff191683800117855562000d07565b8280016001018555821562000d07579182015b8281111562000d0657825182559160200191906001019062000ce9565b5b50905062000d16919062000d1a565b5090565b5b8082111562000d3557600081600090555060010162000d1b565b5090565b60008151905062000d4a8162001279565b92915050565b60008060006060848603121562000d6c5762000d6b6200115e565b5b600062000d7c8682870162000d39565b935050602062000d8f8682870162000d39565b925050604062000da28682870162000d39565b9150509250925092565b62000db78162001053565b82525050565b62000dc88162001067565b82525050565b600062000ddd60308362000faa565b915062000dea8262001163565b604082019050919050565b600062000e0460278362000faa565b915062000e1182620011b2565b604082019050919050565b600062000e2b60268362000faa565b915062000e388262001201565b604082019050919050565b600062000e52601f8362000faa565b915062000e5f8262001250565b602082019050919050565b62000e758162001091565b82525050565b600060a08201905062000e92600083018862000dbd565b62000ea1602083018762000dbd565b62000eb0604083018662000dbd565b62000ebf606083018562000e6a565b62000ece608083018462000dac565b9695505050505050565b6000602082019050818103600083015262000ef38162000dce565b9050919050565b6000602082019050818103600083015262000f158162000df5565b9050919050565b6000602082019050818103600083015262000f378162000e1c565b9050919050565b6000602082019050818103600083015262000f598162000e43565b9050919050565b600060208201905062000f77600083018462000e6a565b92915050565b600060408201905062000f94600083018562000e6a565b62000fa3602083018462000e6a565b9392505050565b600082825260208201905092915050565b600062000fc88262001091565b915062000fd58362001091565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200100d576200100c620010d1565b5b828201905092915050565b6000620010258262001091565b9150620010328362001091565b925082821015620010485762001047620010d1565b5b828203905092915050565b6000620010608262001071565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006002820490506001821680620010b457607f821691505b60208210811415620010cb57620010ca62001100565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b620012848162001091565b81146200129057600080fd5b50565b60805160a05160c05160e0516101005161012051614915620012e36000396000611575015260006120b1015260006120f3015260006120d20152600061205e0152600061208601526149156000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a6116101255780639e34070f116100ad578063cf6654431161007c578063cf66544314610664578063d505accf14610682578063dd62ed3e1461069e578063f1127ed8146106ce578063f2fde38b146106fe57610211565b80639e34070f146105b8578063a457c2d7146105e8578063a9059cbb14610618578063c3cda5201461064857610211565b80637ecebe00116100f45780637ecebe00146104ec5780638da5cb5b1461051c5780638e539e8c1461053a57806395d89b411461056a5780639ab24eb01461058857610211565b8063715018a61461048c578063761229031461049657806376c71ca1146104b25780637cb64759146104d057610211565b806339509351116101a8578063587cde1e11610177578063587cde1e146103c25780635c19a95c146103f257806366deac471461040e5780636fcfff451461042c57806370a082311461045c57610211565b806339509351146103285780633a46b1a81461035857806340c10f1914610388578063515b612a146103a457610211565b806323b872dd116101e457806323b872dd1461029e5780632eb4a7ab146102ce578063313ce567146102ec5780633644e5151461030a57610211565b806301681a621461021657806306fdde0314610232578063095ea7b31461025057806318160ddd14610280575b600080fd5b610230600480360381019061022b9190612f50565b61071a565b005b61023a6107f0565b60405161024791906139c7565b60405180910390f35b61026a600480360381019061026591906130b2565b610882565b6040516102779190613853565b60405180910390f35b6102886108a0565b6040516102959190613d84565b60405180910390f35b6102b860048036038101906102b39190612fbd565b6108aa565b6040516102c59190613853565b60405180910390f35b6102d66109a2565b6040516102e3919061386e565b60405180910390f35b6102f46109a8565b6040516103019190613de3565b60405180910390f35b6103126109b1565b60405161031f919061386e565b60405180910390f35b610342600480360381019061033d91906130b2565b6109c0565b60405161034f9190613853565b60405180910390f35b610372600480360381019061036d91906130b2565b610a6c565b60405161037f9190613d84565b60405180910390f35b6103a2600480360381019061039d91906130b2565b610b00565b005b6103ac610c48565b6040516103b99190613d84565b60405180910390f35b6103dc60048036038101906103d79190612f50565b610c50565b6040516103e99190613838565b60405180910390f35b61040c60048036038101906104079190612f50565b610cb9565b005b610416610ccd565b6040516104239190613d84565b60405180910390f35b61044660048036038101906104419190612f50565b610cd3565b6040516104539190613dc8565b60405180910390f35b61047660048036038101906104719190612f50565b610d27565b6040516104839190613d84565b60405180910390f35b610494610d6f565b005b6104b060048036038101906104ab9190613219565b610df7565b005b6104ba610f82565b6040516104c79190613d84565b60405180910390f35b6104ea60048036038101906104e591906131bf565b610f87565b005b61050660048036038101906105019190612f50565b61108b565b6040516105139190613d84565b60405180910390f35b6105246110db565b6040516105319190613838565b60405180910390f35b610554600480360381019061054f91906131ec565b611105565b6040516105619190613d84565b60405180910390f35b61057261115b565b60405161057f91906139c7565b60405180910390f35b6105a2600480360381019061059d9190612f50565b6111ed565b6040516105af9190613d84565b60405180910390f35b6105d260048036038101906105cd91906131ec565b6112fe565b6040516105df9190613853565b60405180910390f35b61060260048036038101906105fd91906130b2565b61131b565b60405161060f9190613853565b60405180910390f35b610632600480360381019061062d91906130b2565b611406565b60405161063f9190613853565b60405180910390f35b610662600480360381019061065d91906130f2565b611424565b005b61066c611528565b6040516106799190613d84565b60405180910390f35b61069c60048036038101906106979190613010565b61152e565b005b6106b860048036038101906106b39190612f7d565b611670565b6040516106c59190613d84565b60405180910390f35b6106e860048036038101906106e3919061317f565b6116f7565b6040516106f59190613d69565b60405180910390f35b61071860048036038101906107139190612f50565b611807565b005b610722611c06565b73ffffffffffffffffffffffffffffffffffffffff166107406110db565b73ffffffffffffffffffffffffffffffffffffffff1614610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d90613c49565b60405180910390fd5b600c5442116107da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d190613b29565b60405180910390fd5b6107ed30826107e830610d27565b611c0e565b50565b6060600380546107ff90614004565b80601f016020809104026020016040519081016040528092919081815260200182805461082b90614004565b80156108785780601f1061084d57610100808354040283529160200191610878565b820191906000526020600020905b81548152906001019060200180831161085b57829003601f168201915b5050505050905090565b600061089661088f611c06565b8484611e8f565b6001905092915050565b6000600254905090565b60006108b7848484611c0e565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610902611c06565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613c09565b60405180910390fd5b6109968561098e611c06565b858403611e8f565b60019150509392505050565b600a5481565b60006012905090565b60006109bb61205a565b905090565b6000610a626109cd611c06565b8484600160006109db611c06565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a5d9190613e25565b611e8f565b6001905092915050565b6000438210610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790613a29565b60405180910390fd5b610af8600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361211d565b905092915050565b610b08611c06565b73ffffffffffffffffffffffffffffffffffffffff16610b266110db565b73ffffffffffffffffffffffffffffffffffffffff1614610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7390613c49565b60405180910390fd5b61271060c8610b896108a0565b610b939190613eac565b610b9d9190613e7b565b811115610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd690613bc9565b60405180910390fd5b600b54421015610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90613cc9565b60405180910390fd5b6301e1338042610c349190613e25565b600b81905550610c448282612229565b5050565b6301e1338081565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610cca610cc4611c06565b82612237565b50565b600c5481565b6000610d20600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611b6d565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d77611c06565b73ffffffffffffffffffffffffffffffffffffffff16610d956110db565b73ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290613c49565b60405180910390fd5b610df56000612351565b565b60003385604051602001610e0c9291906137a9565b604051602081830303815290604052805190602001209050600080610e75858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600a5485612417565b9150915081610eb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb090613b69565b60405180910390fd5b610ec2816112fe565b15610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef990613ca9565b60405180910390fd5b610f1681600d6124f390919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d488604051610f5c9190613d84565b60405180910390a2610f6e3387612237565b610f79303389611c0e565b50505050505050565b60c881565b610f8f611c06565b73ffffffffffffffffffffffffffffffffffffffff16610fad6110db565b73ffffffffffffffffffffffffffffffffffffffff1614611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90613c49565b60405180910390fd5b6000801b600a541461104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190613ba9565b60405180910390fd5b80600a819055507f1b930366dfeaa7eb3b325021e4ae81e36527063452ee55b86c95f85b36f4c31c81604051611080919061386e565b60405180910390a150565b60006110d4600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612531565b9050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000438210611149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114090613a29565b60405180910390fd5b61115460088361211d565b9050919050565b60606004805461116a90614004565b80601f016020809104026020016040519081016040528092919081815260200182805461119690614004565b80156111e35780601f106111b8576101008083540402835291602001916111e3565b820191906000526020600020905b8154815290600101906020018083116111c657829003601f168201915b5050505050905090565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081146112d557600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001826112899190613f06565b8154811061129a57611299614173565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166112d8565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b600061131482600d61253f90919063ffffffff16565b9050919050565b6000806001600061132a611c06565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113de90613d29565b60405180910390fd5b6113fb6113f2611c06565b85858403611e8f565b600191505092915050565b600061141a611413611c06565b8484611c0e565b6001905092915050565b83421115611467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145e90613a49565b60405180910390fd5b60006114c96114c17fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf8989896040516020016114a694939291906138ea565b6040516020818303038152906040528051906020012061257b565b858585612595565b90506114d4816125c0565b8614611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90613a89565b60405180910390fd5b61151f8188612237565b50505050505050565b600b5481565b83421115611571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156890613ae9565b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000008888886115a08c6125c0565b896040516020016115b696959493929190613889565b60405160208183030381529060405280519060200120905060006115d98261257b565b905060006115e982878787612595565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165090613be9565b60405180910390fd5b6116648a8a8a611e8f565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116ff612e53565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208263ffffffff168154811061175657611755614173565b5b906000526020600020016040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b61180f611c06565b73ffffffffffffffffffffffffffffffffffffffff1661182d6110db565b73ffffffffffffffffffffffffffffffffffffffff1614611883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187a90613c49565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea90613aa9565b60405180910390fd5b6118fc81612351565b50565b611909828261198c565b61191161261e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166119376108a0565b1115611978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196f90613c29565b60405180910390fd5b6119866008611aec83612642565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f390613d49565b60405180910390fd5b611a08600083836128ba565b8060026000828254611a1a9190613e25565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a6f9190613e25565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ad49190613d84565b60405180910390a3611ae8600083836128bf565b5050565b60008183611afa9190613e25565b905092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016821115611b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5c90613c69565b60405180910390fd5b819050919050565b600063ffffffff8016821115611bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baf90613ce9565b60405180910390fd5b819050919050565b611bcb838383611beb565b611be6611bd784610c50565b611be084610c50565b836128cf565b505050565b505050565b60008183611bfe9190613f06565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7590613c89565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce590613a09565b60405180910390fd5b611cf98383836128ba565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7690613b09565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e129190613e25565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e769190613d84565b60405180910390a3611e898484846128bf565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef690613d09565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6690613ac9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161204d9190613d84565b60405180910390a3505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156120ac577f0000000000000000000000000000000000000000000000000000000000000000905061211a565b6121177f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612ac8565b90505b90565b6000808380549050905060005b8181101561219c57600061213e8284612b02565b90508486828154811061215457612153614173565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16111561218657809250612196565b6001816121939190613e25565b91505b5061212a565b600082146121fe57846001836121b29190613f06565b815481106121c3576121c2614173565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612201565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250505092915050565b61223382826118ff565b5050565b600061224283610c50565b9050600061224f84610d27565b905082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a461234b8284836128cf565b50505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060008390506000805b87518110156124e0576002826124399190613eac565b915060008882815181106124505761244f614173565b5b602002602001015190508084116124915783816040516020016124749291906137d5565b6040516020818303038152906040528051906020012093506124cc565b80846040516020016124a49291906137d5565b6040516020818303038152906040528051906020012093506001836124c99190613e25565b92505b5080806124d890614036565b915050612423565b5085821481935093505050935093915050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b600081600001549050919050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b600061258e61258861205a565b83612b28565b9050919050565b60008060006125a687878787612b5b565b915091506125b381612c68565b8192505050949350505050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061260d81612531565b915061261881612e3d565b50919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b600080600085805490509050600081146126b057856001826126649190613f06565b8154811061267557612674614173565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166126b3565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692506126e183858763ffffffff16565b9150600081118015612734575043866001836126fd9190613f06565b8154811061270e5761270d614173565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16145b156127c15761274282611b02565b866001836127509190613f06565b8154811061276157612760614173565b5b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506128b1565b8560405180604001604052806127d643611b6d565b63ffffffff1681526020016127ea85611b02565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b50935093915050565b505050565b6128ca838383611bc0565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561290b5750600081115b15612ac357600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146129e957600080612992600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611bf085612642565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516129de929190613d9f565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ac257600080612a6b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611aec85612642565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612ab7929190613d9f565b60405180910390a250505b5b505050565b60008383834630604051602001612ae395949392919061392f565b6040516020818303038152906040528051906020012090509392505050565b60006002828418612b139190613e7b565b828416612b209190613e25565b905092915050565b60008282604051602001612b3d929190613801565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612b96576000600391509150612c5f565b601b8560ff1614158015612bae5750601c8560ff1614155b15612bc0576000600491509150612c5f565b600060018787878760405160008152602001604052604051612be59493929190613982565b6020604051602081039080840390855afa158015612c07573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c5657600060019250925050612c5f565b80600092509250505b94509492505050565b60006004811115612c7c57612c7b614115565b5b816004811115612c8f57612c8e614115565b5b1415612c9a57612e3a565b60016004811115612cae57612cad614115565b5b816004811115612cc157612cc0614115565b5b1415612d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf9906139e9565b60405180910390fd5b60026004811115612d1657612d15614115565b5b816004811115612d2957612d28614115565b5b1415612d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6190613a69565b60405180910390fd5b60036004811115612d7e57612d7d614115565b5b816004811115612d9157612d90614115565b5b1415612dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc990613b49565b60405180910390fd5b600480811115612de557612de4614115565b5b816004811115612df857612df7614115565b5b1415612e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3090613b89565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600081359050612ea08161486c565b92915050565b60008083601f840112612ebc57612ebb6141a7565b5b8235905067ffffffffffffffff811115612ed957612ed86141a2565b5b602083019150836020820283011115612ef557612ef46141ac565b5b9250929050565b600081359050612f0b81614883565b92915050565b600081359050612f208161489a565b92915050565b600081359050612f35816148b1565b92915050565b600081359050612f4a816148c8565b92915050565b600060208284031215612f6657612f656141b6565b5b6000612f7484828501612e91565b91505092915050565b60008060408385031215612f9457612f936141b6565b5b6000612fa285828601612e91565b9250506020612fb385828601612e91565b9150509250929050565b600080600060608486031215612fd657612fd56141b6565b5b6000612fe486828701612e91565b9350506020612ff586828701612e91565b925050604061300686828701612f11565b9150509250925092565b600080600080600080600060e0888a03121561302f5761302e6141b6565b5b600061303d8a828b01612e91565b975050602061304e8a828b01612e91565b965050604061305f8a828b01612f11565b95505060606130708a828b01612f11565b94505060806130818a828b01612f3b565b93505060a06130928a828b01612efc565b92505060c06130a38a828b01612efc565b91505092959891949750929550565b600080604083850312156130c9576130c86141b6565b5b60006130d785828601612e91565b92505060206130e885828601612f11565b9150509250929050565b60008060008060008060c0878903121561310f5761310e6141b6565b5b600061311d89828a01612e91565b965050602061312e89828a01612f11565b955050604061313f89828a01612f11565b945050606061315089828a01612f3b565b935050608061316189828a01612efc565b92505060a061317289828a01612efc565b9150509295509295509295565b60008060408385031215613196576131956141b6565b5b60006131a485828601612e91565b92505060206131b585828601612f26565b9150509250929050565b6000602082840312156131d5576131d46141b6565b5b60006131e384828501612efc565b91505092915050565b600060208284031215613202576132016141b6565b5b600061321084828501612f11565b91505092915050565b60008060008060608587031215613233576132326141b6565b5b600061324187828801612f11565b945050602061325287828801612e91565b935050604085013567ffffffffffffffff811115613273576132726141b1565b5b61327f87828801612ea6565b925092505092959194509250565b61329681613f3a565b82525050565b6132ad6132a882613f3a565b61407f565b82525050565b6132bc81613f4c565b82525050565b6132cb81613f58565b82525050565b6132e26132dd82613f58565b614091565b82525050565b60006132f382613dfe565b6132fd8185613e09565b935061330d818560208601613fd1565b613316816141bb565b840191505092915050565b600061332e601883613e09565b9150613339826141d9565b602082019050919050565b6000613351602383613e09565b915061335c82614202565b604082019050919050565b6000613374601f83613e09565b915061337f82614251565b602082019050919050565b6000613397601d83613e09565b91506133a28261427a565b602082019050919050565b60006133ba601f83613e09565b91506133c5826142a3565b602082019050919050565b60006133dd601983613e09565b91506133e8826142cc565b602082019050919050565b6000613400602683613e09565b915061340b826142f5565b604082019050919050565b6000613423602283613e09565b915061342e82614344565b604082019050919050565b6000613446600283613e1a565b915061345182614393565b600282019050919050565b6000613469601d83613e09565b9150613474826143bc565b602082019050919050565b600061348c602683613e09565b9150613497826143e5565b604082019050919050565b60006134af601f83613e09565b91506134ba82614434565b602082019050919050565b60006134d2602283613e09565b91506134dd8261445d565b604082019050919050565b60006134f5601a83613e09565b9150613500826144ac565b602082019050919050565b6000613518602283613e09565b9150613523826144d5565b604082019050919050565b600061353b601c83613e09565b915061354682614524565b602082019050919050565b600061355e602083613e09565b91506135698261454d565b602082019050919050565b6000613581601e83613e09565b915061358c82614576565b602082019050919050565b60006135a4602883613e09565b91506135af8261459f565b604082019050919050565b60006135c7603083613e09565b91506135d2826145ee565b604082019050919050565b60006135ea602083613e09565b91506135f58261463d565b602082019050919050565b600061360d602783613e09565b915061361882614666565b604082019050919050565b6000613630602583613e09565b915061363b826146b5565b604082019050919050565b6000613653601c83613e09565b915061365e82614704565b602082019050919050565b6000613676601483613e09565b91506136818261472d565b602082019050919050565b6000613699602683613e09565b91506136a482614756565b604082019050919050565b60006136bc602483613e09565b91506136c7826147a5565b604082019050919050565b60006136df602583613e09565b91506136ea826147f4565b604082019050919050565b6000613702601f83613e09565b915061370d82614843565b602082019050919050565b60408201600082015161372e600085018261377c565b5060208201516137416020850182613747565b50505050565b61375081613f82565b82525050565b61375f81613faa565b82525050565b61377661377182613faa565b6140ad565b82525050565b61378581613fb4565b82525050565b61379481613fb4565b82525050565b6137a381613fc4565b82525050565b60006137b5828561329c565b6014820191506137c58284613765565b6020820191508190509392505050565b60006137e182856132d1565b6020820191506137f182846132d1565b6020820191508190509392505050565b600061380c82613439565b915061381882856132d1565b60208201915061382882846132d1565b6020820191508190509392505050565b600060208201905061384d600083018461328d565b92915050565b600060208201905061386860008301846132b3565b92915050565b600060208201905061388360008301846132c2565b92915050565b600060c08201905061389e60008301896132c2565b6138ab602083018861328d565b6138b8604083018761328d565b6138c56060830186613756565b6138d26080830185613756565b6138df60a0830184613756565b979650505050505050565b60006080820190506138ff60008301876132c2565b61390c602083018661328d565b6139196040830185613756565b6139266060830184613756565b95945050505050565b600060a08201905061394460008301886132c2565b61395160208301876132c2565b61395e60408301866132c2565b61396b6060830185613756565b613978608083018461328d565b9695505050505050565b600060808201905061399760008301876132c2565b6139a4602083018661379a565b6139b160408301856132c2565b6139be60608301846132c2565b95945050505050565b600060208201905081810360008301526139e181846132e8565b905092915050565b60006020820190508181036000830152613a0281613321565b9050919050565b60006020820190508181036000830152613a2281613344565b9050919050565b60006020820190508181036000830152613a4281613367565b9050919050565b60006020820190508181036000830152613a628161338a565b9050919050565b60006020820190508181036000830152613a82816133ad565b9050919050565b60006020820190508181036000830152613aa2816133d0565b9050919050565b60006020820190508181036000830152613ac2816133f3565b9050919050565b60006020820190508181036000830152613ae281613416565b9050919050565b60006020820190508181036000830152613b028161345c565b9050919050565b60006020820190508181036000830152613b228161347f565b9050919050565b60006020820190508181036000830152613b42816134a2565b9050919050565b60006020820190508181036000830152613b62816134c5565b9050919050565b60006020820190508181036000830152613b82816134e8565b9050919050565b60006020820190508181036000830152613ba28161350b565b9050919050565b60006020820190508181036000830152613bc28161352e565b9050919050565b60006020820190508181036000830152613be281613551565b9050919050565b60006020820190508181036000830152613c0281613574565b9050919050565b60006020820190508181036000830152613c2281613597565b9050919050565b60006020820190508181036000830152613c42816135ba565b9050919050565b60006020820190508181036000830152613c62816135dd565b9050919050565b60006020820190508181036000830152613c8281613600565b9050919050565b60006020820190508181036000830152613ca281613623565b9050919050565b60006020820190508181036000830152613cc281613646565b9050919050565b60006020820190508181036000830152613ce281613669565b9050919050565b60006020820190508181036000830152613d028161368c565b9050919050565b60006020820190508181036000830152613d22816136af565b9050919050565b60006020820190508181036000830152613d42816136d2565b9050919050565b60006020820190508181036000830152613d62816136f5565b9050919050565b6000604082019050613d7e6000830184613718565b92915050565b6000602082019050613d996000830184613756565b92915050565b6000604082019050613db46000830185613756565b613dc16020830184613756565b9392505050565b6000602082019050613ddd600083018461378b565b92915050565b6000602082019050613df8600083018461379a565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613e3082613faa565b9150613e3b83613faa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e7057613e6f6140b7565b5b828201905092915050565b6000613e8682613faa565b9150613e9183613faa565b925082613ea157613ea06140e6565b5b828204905092915050565b6000613eb782613faa565b9150613ec283613faa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613efb57613efa6140b7565b5b828202905092915050565b6000613f1182613faa565b9150613f1c83613faa565b925082821015613f2f57613f2e6140b7565b5b828203905092915050565b6000613f4582613f62565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015613fef578082015181840152602081019050613fd4565b83811115613ffe576000848401525b50505050565b6000600282049050600182168061401c57607f821691505b602082108114156140305761402f614144565b5b50919050565b600061404182613faa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614074576140736140b7565b5b600182019050919050565b600061408a8261409b565b9050919050565b6000819050919050565b60006140a6826141cc565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400600082015250565b7f4552433230566f7465733a207369676e61747572652065787069726564000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f454e533a20436c61696d20706572696f64206e6f742079657420656e64656400600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f454e533a2056616c69642070726f6f662072657175697265642e000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f454e533a204d65726b6c6520726f6f7420616c72656164792073657400000000600082015250565b7f454e533a204d696e742065786365656473206d6178696d756d20616d6f756e74600082015250565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f454e533a20546f6b656e7320616c726561647920636c61696d65642e00000000600082015250565b7f454e533a2043616e6e6f74206d696e7420796574000000000000000000000000600082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61487581613f3a565b811461488057600080fd5b50565b61488c81613f58565b811461489757600080fd5b50565b6148a381613faa565b81146148ae57600080fd5b50565b6148ba81613fb4565b81146148c557600080fd5b50565b6148d181613fc4565b81146148dc57600080fd5b5056fea26469706673582212200e1d1f80eb11feb77de2c926a297bb44767cf976cc790a4953dfc0bc5fd832c664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a6116101255780639e34070f116100ad578063cf6654431161007c578063cf66544314610664578063d505accf14610682578063dd62ed3e1461069e578063f1127ed8146106ce578063f2fde38b146106fe57610211565b80639e34070f146105b8578063a457c2d7146105e8578063a9059cbb14610618578063c3cda5201461064857610211565b80637ecebe00116100f45780637ecebe00146104ec5780638da5cb5b1461051c5780638e539e8c1461053a57806395d89b411461056a5780639ab24eb01461058857610211565b8063715018a61461048c578063761229031461049657806376c71ca1146104b25780637cb64759146104d057610211565b806339509351116101a8578063587cde1e11610177578063587cde1e146103c25780635c19a95c146103f257806366deac471461040e5780636fcfff451461042c57806370a082311461045c57610211565b806339509351146103285780633a46b1a81461035857806340c10f1914610388578063515b612a146103a457610211565b806323b872dd116101e457806323b872dd1461029e5780632eb4a7ab146102ce578063313ce567146102ec5780633644e5151461030a57610211565b806301681a621461021657806306fdde0314610232578063095ea7b31461025057806318160ddd14610280575b600080fd5b610230600480360381019061022b9190612f50565b61071a565b005b61023a6107f0565b60405161024791906139c7565b60405180910390f35b61026a600480360381019061026591906130b2565b610882565b6040516102779190613853565b60405180910390f35b6102886108a0565b6040516102959190613d84565b60405180910390f35b6102b860048036038101906102b39190612fbd565b6108aa565b6040516102c59190613853565b60405180910390f35b6102d66109a2565b6040516102e3919061386e565b60405180910390f35b6102f46109a8565b6040516103019190613de3565b60405180910390f35b6103126109b1565b60405161031f919061386e565b60405180910390f35b610342600480360381019061033d91906130b2565b6109c0565b60405161034f9190613853565b60405180910390f35b610372600480360381019061036d91906130b2565b610a6c565b60405161037f9190613d84565b60405180910390f35b6103a2600480360381019061039d91906130b2565b610b00565b005b6103ac610c48565b6040516103b99190613d84565b60405180910390f35b6103dc60048036038101906103d79190612f50565b610c50565b6040516103e99190613838565b60405180910390f35b61040c60048036038101906104079190612f50565b610cb9565b005b610416610ccd565b6040516104239190613d84565b60405180910390f35b61044660048036038101906104419190612f50565b610cd3565b6040516104539190613dc8565b60405180910390f35b61047660048036038101906104719190612f50565b610d27565b6040516104839190613d84565b60405180910390f35b610494610d6f565b005b6104b060048036038101906104ab9190613219565b610df7565b005b6104ba610f82565b6040516104c79190613d84565b60405180910390f35b6104ea60048036038101906104e591906131bf565b610f87565b005b61050660048036038101906105019190612f50565b61108b565b6040516105139190613d84565b60405180910390f35b6105246110db565b6040516105319190613838565b60405180910390f35b610554600480360381019061054f91906131ec565b611105565b6040516105619190613d84565b60405180910390f35b61057261115b565b60405161057f91906139c7565b60405180910390f35b6105a2600480360381019061059d9190612f50565b6111ed565b6040516105af9190613d84565b60405180910390f35b6105d260048036038101906105cd91906131ec565b6112fe565b6040516105df9190613853565b60405180910390f35b61060260048036038101906105fd91906130b2565b61131b565b60405161060f9190613853565b60405180910390f35b610632600480360381019061062d91906130b2565b611406565b60405161063f9190613853565b60405180910390f35b610662600480360381019061065d91906130f2565b611424565b005b61066c611528565b6040516106799190613d84565b60405180910390f35b61069c60048036038101906106979190613010565b61152e565b005b6106b860048036038101906106b39190612f7d565b611670565b6040516106c59190613d84565b60405180910390f35b6106e860048036038101906106e3919061317f565b6116f7565b6040516106f59190613d69565b60405180910390f35b61071860048036038101906107139190612f50565b611807565b005b610722611c06565b73ffffffffffffffffffffffffffffffffffffffff166107406110db565b73ffffffffffffffffffffffffffffffffffffffff1614610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d90613c49565b60405180910390fd5b600c5442116107da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d190613b29565b60405180910390fd5b6107ed30826107e830610d27565b611c0e565b50565b6060600380546107ff90614004565b80601f016020809104026020016040519081016040528092919081815260200182805461082b90614004565b80156108785780601f1061084d57610100808354040283529160200191610878565b820191906000526020600020905b81548152906001019060200180831161085b57829003601f168201915b5050505050905090565b600061089661088f611c06565b8484611e8f565b6001905092915050565b6000600254905090565b60006108b7848484611c0e565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610902611c06565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613c09565b60405180910390fd5b6109968561098e611c06565b858403611e8f565b60019150509392505050565b600a5481565b60006012905090565b60006109bb61205a565b905090565b6000610a626109cd611c06565b8484600160006109db611c06565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a5d9190613e25565b611e8f565b6001905092915050565b6000438210610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790613a29565b60405180910390fd5b610af8600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361211d565b905092915050565b610b08611c06565b73ffffffffffffffffffffffffffffffffffffffff16610b266110db565b73ffffffffffffffffffffffffffffffffffffffff1614610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7390613c49565b60405180910390fd5b61271060c8610b896108a0565b610b939190613eac565b610b9d9190613e7b565b811115610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd690613bc9565b60405180910390fd5b600b54421015610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90613cc9565b60405180910390fd5b6301e1338042610c349190613e25565b600b81905550610c448282612229565b5050565b6301e1338081565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610cca610cc4611c06565b82612237565b50565b600c5481565b6000610d20600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611b6d565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d77611c06565b73ffffffffffffffffffffffffffffffffffffffff16610d956110db565b73ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290613c49565b60405180910390fd5b610df56000612351565b565b60003385604051602001610e0c9291906137a9565b604051602081830303815290604052805190602001209050600080610e75858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600a5485612417565b9150915081610eb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb090613b69565b60405180910390fd5b610ec2816112fe565b15610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef990613ca9565b60405180910390fd5b610f1681600d6124f390919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d488604051610f5c9190613d84565b60405180910390a2610f6e3387612237565b610f79303389611c0e565b50505050505050565b60c881565b610f8f611c06565b73ffffffffffffffffffffffffffffffffffffffff16610fad6110db565b73ffffffffffffffffffffffffffffffffffffffff1614611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90613c49565b60405180910390fd5b6000801b600a541461104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190613ba9565b60405180910390fd5b80600a819055507f1b930366dfeaa7eb3b325021e4ae81e36527063452ee55b86c95f85b36f4c31c81604051611080919061386e565b60405180910390a150565b60006110d4600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612531565b9050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000438210611149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114090613a29565b60405180910390fd5b61115460088361211d565b9050919050565b60606004805461116a90614004565b80601f016020809104026020016040519081016040528092919081815260200182805461119690614004565b80156111e35780601f106111b8576101008083540402835291602001916111e3565b820191906000526020600020905b8154815290600101906020018083116111c657829003601f168201915b5050505050905090565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081146112d557600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001826112899190613f06565b8154811061129a57611299614173565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166112d8565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b600061131482600d61253f90919063ffffffff16565b9050919050565b6000806001600061132a611c06565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113de90613d29565b60405180910390fd5b6113fb6113f2611c06565b85858403611e8f565b600191505092915050565b600061141a611413611c06565b8484611c0e565b6001905092915050565b83421115611467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145e90613a49565b60405180910390fd5b60006114c96114c17fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf8989896040516020016114a694939291906138ea565b6040516020818303038152906040528051906020012061257b565b858585612595565b90506114d4816125c0565b8614611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90613a89565b60405180910390fd5b61151f8188612237565b50505050505050565b600b5481565b83421115611571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156890613ae9565b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000008888886115a08c6125c0565b896040516020016115b696959493929190613889565b60405160208183030381529060405280519060200120905060006115d98261257b565b905060006115e982878787612595565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165090613be9565b60405180910390fd5b6116648a8a8a611e8f565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116ff612e53565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208263ffffffff168154811061175657611755614173565b5b906000526020600020016040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b61180f611c06565b73ffffffffffffffffffffffffffffffffffffffff1661182d6110db565b73ffffffffffffffffffffffffffffffffffffffff1614611883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187a90613c49565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea90613aa9565b60405180910390fd5b6118fc81612351565b50565b611909828261198c565b61191161261e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166119376108a0565b1115611978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196f90613c29565b60405180910390fd5b6119866008611aec83612642565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f390613d49565b60405180910390fd5b611a08600083836128ba565b8060026000828254611a1a9190613e25565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a6f9190613e25565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ad49190613d84565b60405180910390a3611ae8600083836128bf565b5050565b60008183611afa9190613e25565b905092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016821115611b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5c90613c69565b60405180910390fd5b819050919050565b600063ffffffff8016821115611bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baf90613ce9565b60405180910390fd5b819050919050565b611bcb838383611beb565b611be6611bd784610c50565b611be084610c50565b836128cf565b505050565b505050565b60008183611bfe9190613f06565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7590613c89565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce590613a09565b60405180910390fd5b611cf98383836128ba565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7690613b09565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e129190613e25565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e769190613d84565b60405180910390a3611e898484846128bf565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef690613d09565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6690613ac9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161204d9190613d84565b60405180910390a3505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156120ac577f0000000000000000000000000000000000000000000000000000000000000000905061211a565b6121177f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612ac8565b90505b90565b6000808380549050905060005b8181101561219c57600061213e8284612b02565b90508486828154811061215457612153614173565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16111561218657809250612196565b6001816121939190613e25565b91505b5061212a565b600082146121fe57846001836121b29190613f06565b815481106121c3576121c2614173565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612201565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250505092915050565b61223382826118ff565b5050565b600061224283610c50565b9050600061224f84610d27565b905082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a461234b8284836128cf565b50505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060008390506000805b87518110156124e0576002826124399190613eac565b915060008882815181106124505761244f614173565b5b602002602001015190508084116124915783816040516020016124749291906137d5565b6040516020818303038152906040528051906020012093506124cc565b80846040516020016124a49291906137d5565b6040516020818303038152906040528051906020012093506001836124c99190613e25565b92505b5080806124d890614036565b915050612423565b5085821481935093505050935093915050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b600081600001549050919050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b600061258e61258861205a565b83612b28565b9050919050565b60008060006125a687878787612b5b565b915091506125b381612c68565b8192505050949350505050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061260d81612531565b915061261881612e3d565b50919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b600080600085805490509050600081146126b057856001826126649190613f06565b8154811061267557612674614173565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166126b3565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692506126e183858763ffffffff16565b9150600081118015612734575043866001836126fd9190613f06565b8154811061270e5761270d614173565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16145b156127c15761274282611b02565b866001836127509190613f06565b8154811061276157612760614173565b5b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506128b1565b8560405180604001604052806127d643611b6d565b63ffffffff1681526020016127ea85611b02565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b50935093915050565b505050565b6128ca838383611bc0565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561290b5750600081115b15612ac357600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146129e957600080612992600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611bf085612642565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516129de929190613d9f565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ac257600080612a6b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611aec85612642565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612ab7929190613d9f565b60405180910390a250505b5b505050565b60008383834630604051602001612ae395949392919061392f565b6040516020818303038152906040528051906020012090509392505050565b60006002828418612b139190613e7b565b828416612b209190613e25565b905092915050565b60008282604051602001612b3d929190613801565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612b96576000600391509150612c5f565b601b8560ff1614158015612bae5750601c8560ff1614155b15612bc0576000600491509150612c5f565b600060018787878760405160008152602001604052604051612be59493929190613982565b6020604051602081039080840390855afa158015612c07573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c5657600060019250925050612c5f565b80600092509250505b94509492505050565b60006004811115612c7c57612c7b614115565b5b816004811115612c8f57612c8e614115565b5b1415612c9a57612e3a565b60016004811115612cae57612cad614115565b5b816004811115612cc157612cc0614115565b5b1415612d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf9906139e9565b60405180910390fd5b60026004811115612d1657612d15614115565b5b816004811115612d2957612d28614115565b5b1415612d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6190613a69565b60405180910390fd5b60036004811115612d7e57612d7d614115565b5b816004811115612d9157612d90614115565b5b1415612dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc990613b49565b60405180910390fd5b600480811115612de557612de4614115565b5b816004811115612df857612df7614115565b5b1415612e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3090613b89565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600081359050612ea08161486c565b92915050565b60008083601f840112612ebc57612ebb6141a7565b5b8235905067ffffffffffffffff811115612ed957612ed86141a2565b5b602083019150836020820283011115612ef557612ef46141ac565b5b9250929050565b600081359050612f0b81614883565b92915050565b600081359050612f208161489a565b92915050565b600081359050612f35816148b1565b92915050565b600081359050612f4a816148c8565b92915050565b600060208284031215612f6657612f656141b6565b5b6000612f7484828501612e91565b91505092915050565b60008060408385031215612f9457612f936141b6565b5b6000612fa285828601612e91565b9250506020612fb385828601612e91565b9150509250929050565b600080600060608486031215612fd657612fd56141b6565b5b6000612fe486828701612e91565b9350506020612ff586828701612e91565b925050604061300686828701612f11565b9150509250925092565b600080600080600080600060e0888a03121561302f5761302e6141b6565b5b600061303d8a828b01612e91565b975050602061304e8a828b01612e91565b965050604061305f8a828b01612f11565b95505060606130708a828b01612f11565b94505060806130818a828b01612f3b565b93505060a06130928a828b01612efc565b92505060c06130a38a828b01612efc565b91505092959891949750929550565b600080604083850312156130c9576130c86141b6565b5b60006130d785828601612e91565b92505060206130e885828601612f11565b9150509250929050565b60008060008060008060c0878903121561310f5761310e6141b6565b5b600061311d89828a01612e91565b965050602061312e89828a01612f11565b955050604061313f89828a01612f11565b945050606061315089828a01612f3b565b935050608061316189828a01612efc565b92505060a061317289828a01612efc565b9150509295509295509295565b60008060408385031215613196576131956141b6565b5b60006131a485828601612e91565b92505060206131b585828601612f26565b9150509250929050565b6000602082840312156131d5576131d46141b6565b5b60006131e384828501612efc565b91505092915050565b600060208284031215613202576132016141b6565b5b600061321084828501612f11565b91505092915050565b60008060008060608587031215613233576132326141b6565b5b600061324187828801612f11565b945050602061325287828801612e91565b935050604085013567ffffffffffffffff811115613273576132726141b1565b5b61327f87828801612ea6565b925092505092959194509250565b61329681613f3a565b82525050565b6132ad6132a882613f3a565b61407f565b82525050565b6132bc81613f4c565b82525050565b6132cb81613f58565b82525050565b6132e26132dd82613f58565b614091565b82525050565b60006132f382613dfe565b6132fd8185613e09565b935061330d818560208601613fd1565b613316816141bb565b840191505092915050565b600061332e601883613e09565b9150613339826141d9565b602082019050919050565b6000613351602383613e09565b915061335c82614202565b604082019050919050565b6000613374601f83613e09565b915061337f82614251565b602082019050919050565b6000613397601d83613e09565b91506133a28261427a565b602082019050919050565b60006133ba601f83613e09565b91506133c5826142a3565b602082019050919050565b60006133dd601983613e09565b91506133e8826142cc565b602082019050919050565b6000613400602683613e09565b915061340b826142f5565b604082019050919050565b6000613423602283613e09565b915061342e82614344565b604082019050919050565b6000613446600283613e1a565b915061345182614393565b600282019050919050565b6000613469601d83613e09565b9150613474826143bc565b602082019050919050565b600061348c602683613e09565b9150613497826143e5565b604082019050919050565b60006134af601f83613e09565b91506134ba82614434565b602082019050919050565b60006134d2602283613e09565b91506134dd8261445d565b604082019050919050565b60006134f5601a83613e09565b9150613500826144ac565b602082019050919050565b6000613518602283613e09565b9150613523826144d5565b604082019050919050565b600061353b601c83613e09565b915061354682614524565b602082019050919050565b600061355e602083613e09565b91506135698261454d565b602082019050919050565b6000613581601e83613e09565b915061358c82614576565b602082019050919050565b60006135a4602883613e09565b91506135af8261459f565b604082019050919050565b60006135c7603083613e09565b91506135d2826145ee565b604082019050919050565b60006135ea602083613e09565b91506135f58261463d565b602082019050919050565b600061360d602783613e09565b915061361882614666565b604082019050919050565b6000613630602583613e09565b915061363b826146b5565b604082019050919050565b6000613653601c83613e09565b915061365e82614704565b602082019050919050565b6000613676601483613e09565b91506136818261472d565b602082019050919050565b6000613699602683613e09565b91506136a482614756565b604082019050919050565b60006136bc602483613e09565b91506136c7826147a5565b604082019050919050565b60006136df602583613e09565b91506136ea826147f4565b604082019050919050565b6000613702601f83613e09565b915061370d82614843565b602082019050919050565b60408201600082015161372e600085018261377c565b5060208201516137416020850182613747565b50505050565b61375081613f82565b82525050565b61375f81613faa565b82525050565b61377661377182613faa565b6140ad565b82525050565b61378581613fb4565b82525050565b61379481613fb4565b82525050565b6137a381613fc4565b82525050565b60006137b5828561329c565b6014820191506137c58284613765565b6020820191508190509392505050565b60006137e182856132d1565b6020820191506137f182846132d1565b6020820191508190509392505050565b600061380c82613439565b915061381882856132d1565b60208201915061382882846132d1565b6020820191508190509392505050565b600060208201905061384d600083018461328d565b92915050565b600060208201905061386860008301846132b3565b92915050565b600060208201905061388360008301846132c2565b92915050565b600060c08201905061389e60008301896132c2565b6138ab602083018861328d565b6138b8604083018761328d565b6138c56060830186613756565b6138d26080830185613756565b6138df60a0830184613756565b979650505050505050565b60006080820190506138ff60008301876132c2565b61390c602083018661328d565b6139196040830185613756565b6139266060830184613756565b95945050505050565b600060a08201905061394460008301886132c2565b61395160208301876132c2565b61395e60408301866132c2565b61396b6060830185613756565b613978608083018461328d565b9695505050505050565b600060808201905061399760008301876132c2565b6139a4602083018661379a565b6139b160408301856132c2565b6139be60608301846132c2565b95945050505050565b600060208201905081810360008301526139e181846132e8565b905092915050565b60006020820190508181036000830152613a0281613321565b9050919050565b60006020820190508181036000830152613a2281613344565b9050919050565b60006020820190508181036000830152613a4281613367565b9050919050565b60006020820190508181036000830152613a628161338a565b9050919050565b60006020820190508181036000830152613a82816133ad565b9050919050565b60006020820190508181036000830152613aa2816133d0565b9050919050565b60006020820190508181036000830152613ac2816133f3565b9050919050565b60006020820190508181036000830152613ae281613416565b9050919050565b60006020820190508181036000830152613b028161345c565b9050919050565b60006020820190508181036000830152613b228161347f565b9050919050565b60006020820190508181036000830152613b42816134a2565b9050919050565b60006020820190508181036000830152613b62816134c5565b9050919050565b60006020820190508181036000830152613b82816134e8565b9050919050565b60006020820190508181036000830152613ba28161350b565b9050919050565b60006020820190508181036000830152613bc28161352e565b9050919050565b60006020820190508181036000830152613be281613551565b9050919050565b60006020820190508181036000830152613c0281613574565b9050919050565b60006020820190508181036000830152613c2281613597565b9050919050565b60006020820190508181036000830152613c42816135ba565b9050919050565b60006020820190508181036000830152613c62816135dd565b9050919050565b60006020820190508181036000830152613c8281613600565b9050919050565b60006020820190508181036000830152613ca281613623565b9050919050565b60006020820190508181036000830152613cc281613646565b9050919050565b60006020820190508181036000830152613ce281613669565b9050919050565b60006020820190508181036000830152613d028161368c565b9050919050565b60006020820190508181036000830152613d22816136af565b9050919050565b60006020820190508181036000830152613d42816136d2565b9050919050565b60006020820190508181036000830152613d62816136f5565b9050919050565b6000604082019050613d7e6000830184613718565b92915050565b6000602082019050613d996000830184613756565b92915050565b6000604082019050613db46000830185613756565b613dc16020830184613756565b9392505050565b6000602082019050613ddd600083018461378b565b92915050565b6000602082019050613df8600083018461379a565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613e3082613faa565b9150613e3b83613faa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e7057613e6f6140b7565b5b828201905092915050565b6000613e8682613faa565b9150613e9183613faa565b925082613ea157613ea06140e6565b5b828204905092915050565b6000613eb782613faa565b9150613ec283613faa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613efb57613efa6140b7565b5b828202905092915050565b6000613f1182613faa565b9150613f1c83613faa565b925082821015613f2f57613f2e6140b7565b5b828203905092915050565b6000613f4582613f62565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015613fef578082015181840152602081019050613fd4565b83811115613ffe576000848401525b50505050565b6000600282049050600182168061401c57607f821691505b602082108114156140305761402f614144565b5b50919050565b600061404182613faa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614074576140736140b7565b5b600182019050919050565b600061408a8261409b565b9050919050565b6000819050919050565b60006140a6826141cc565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400600082015250565b7f4552433230566f7465733a207369676e61747572652065787069726564000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f454e533a20436c61696d20706572696f64206e6f742079657420656e64656400600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f454e533a2056616c69642070726f6f662072657175697265642e000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f454e533a204d65726b6c6520726f6f7420616c72656164792073657400000000600082015250565b7f454e533a204d696e742065786365656473206d6178696d756d20616d6f756e74600082015250565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f454e533a20546f6b656e7320616c726561647920636c61696d65642e00000000600082015250565b7f454e533a2043616e6e6f74206d696e7420796574000000000000000000000000600082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61487581613f3a565b811461488057600080fd5b50565b61488c81613f58565b811461489757600080fd5b50565b6148a381613faa565b81146148ae57600080fd5b50565b6148ba81613fb4565b81146148c557600080fd5b50565b6148d181613fc4565b81146148dc57600080fd5b5056fea26469706673582212200e1d1f80eb11feb77de2c926a297bb44767cf976cc790a4953dfc0bc5fd832c664736f6c63430008070033",
  "devdoc": {
    "details": "An ERC20 token for ENS.      Besides the addition of voting capabilities, we make a couple of customisations:       - Airdrop claim functionality via `claimTokens`. At creation time the tokens that         should be available for the airdrop are transferred to the token contract address;         airdrop claims are made from this balance.       - Support for the owner (the DAO) to mint new tokens, at up to 2% PA.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "checkpoints(address,uint32)": {
        "details": "Get the `pos`-th checkpoint for `account`."
      },
      "claimTokens(uint256,address,bytes32[])": {
        "details": "Claims airdropped tokens.",
        "params": {
          "amount": "The amount of the claim being made.",
          "delegate": "The address the tokenholder wants to delegate their votes to.",
          "merkleProof": "A merkle proof proving the claim is valid."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_claimPeriodEnds": "The timestamp at which tokens are no longer claimable.",
          "airdropSupply": "The number of tokens to reserve for the airdrop.",
          "freeSupply": "The number of tokens to issue to the contract deployer."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "details": "Delegate votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`"
      },
      "delegates(address)": {
        "details": "Get the address `account` is currently delegating to."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
      },
      "getPastVotes(address,uint256)": {
        "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
      },
      "getVotes(address)": {
        "details": "Gets the current votes balance for `account`"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isClaimed(uint256)": {
        "details": "Returns true if the claim at the given index in the merkle tree has already been made.",
        "params": {
          "index": "The index into the merkle tree."
        }
      },
      "mint(address,uint256)": {
        "details": "Mints new tokens. Can only be executed every `minimumMintInterval`, by the owner, and cannot      exceed `mintCap / 10000` fraction of the current total supply.",
        "params": {
          "amount": "The quantity of tokens to mint.",
          "dest": "The address to mint the new tokens to."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "numCheckpoints(address)": {
        "details": "Get number of checkpoints for `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMerkleRoot(bytes32)": {
        "details": "Sets the merkle root. Only callable if the root is not yet set.",
        "params": {
          "_merkleRoot": "The merkle root to set."
        }
      },
      "sweep(address)": {
        "details": "Allows the owner to sweep unclaimed tokens after the claim period ends.",
        "params": {
          "dest": "The address to sweep the tokens to."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7750,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7756,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7758,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7760,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 7762,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9052,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)9559_storage)"
      },
      {
        "astId": 8381,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_delegates",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8387,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)8372_storage)dyn_storage)"
      },
      {
        "astId": 8391,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Checkpoint)8372_storage)dyn_storage"
      },
      {
        "astId": 5011,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 11626,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 11628,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "nextMint",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11630,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "claimPeriodEnds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11633,
        "contract": "contracts/ENSToken.sol:ENSToken",
        "label": "claimed",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(BitMap)11074_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint)8372_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)8372_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20Votes.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Checkpoint)8372_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Checkpoint)8372_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)9559_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)9559_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)11074_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 11073,
            "contract": "contracts/ENSToken.sol:ENSToken",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)8372_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Votes.Checkpoint",
        "members": [
          {
            "astId": 8369,
            "contract": "contracts/ENSToken.sol:ENSToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8371,
            "contract": "contracts/ENSToken.sol:ENSToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)9559_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 9558,
            "contract": "contracts/ENSToken.sol:ENSToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
