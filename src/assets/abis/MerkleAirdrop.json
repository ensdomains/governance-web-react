{
  "address": "0xf7d9cf4de5d385b443badd000487f2fcd8983bb3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6542aee893776aa512d466b45a7923c3b2d2301f2edec57497616cb3e68681aa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "987135",
    "logsBloom": "0x
    "blockHash": "0xa88af0b7da281243e5dc7ab838692208792748fd7d42e96a2a8cf07f0e1b5389",
    "transactionHash": "0x6542aee893776aa512d466b45a7923c3b2d2301f2edec57497616cb3e68681aa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13,
        "transactionHash": "0x6542aee893776aa512d466b45a7923c3b2d2301f2edec57497616cb3e68681aa",
        "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa88af0b7da281243e5dc7ab838692208792748fd7d42e96a2a8cf07f0e1b5389"
      }
    ],
    "blockNumber": 13,
    "cumulativeGasUsed": "987135",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0xf4ee7e270b86a22c265f8738c1fa0ebda41ef906f761892025bbebb70fe5e8ea"
  ],
  "solcInputHash": "c49f3e93850be41828b1123fd2e9a4b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract to allow users to claim tokens via a 'merkle airdrop'.\",\"kind\":\"dev\",\"methods\":{\"claimTokens(address,uint256,bytes32[])\":{\"details\":\"Claims airdropped tokens.\",\"params\":{\"amount\":\"The amount of the claim being made.\",\"merkleProof\":\"A merkle proof proving the claim is valid.\",\"recipient\":\"The account being claimed for.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_sender\":\"The account to send airdrop tokens from.\",\"_token\":\"The token contract to send tokens with.\"}},\"isClaimed(uint256)\":{\"details\":\"Returns true if the claim at the given index in the merkle tree has already been made.\",\"params\":{\"index\":\"The index into the merkle tree.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleAirdrop.sol\":\"MerkleAirdrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x2d5ac2826ea6cb4493de1e1d1f07c7104e39fa508ccc8af5d712028821d73416\",\"license\":\"MIT\"},\"contracts/MerkleAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\n/**\\n * @dev A contract to allow users to claim tokens via a 'merkle airdrop'.\\n */\\ncontract MerkleAirdrop is Ownable {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    address public immutable sender;\\n    IERC20 public immutable token;\\n    bytes32 public immutable merkleRoot;\\n    BitMaps.BitMap private claimed;\\n\\n    event MerkleRootChanged(bytes32 merkleRoot);\\n    event Claim(address indexed claimant, uint256 amount);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _sender The account to send airdrop tokens from.\\n     * @param _token The token contract to send tokens with.\\n     */\\n    constructor(address _sender, IERC20 _token, bytes32 _merkleRoot) {\\n        sender = _sender;\\n        token = _token;\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    /**\\n     * @dev Claims airdropped tokens.\\n     * @param recipient The account being claimed for.\\n     * @param amount The amount of the claim being made.\\n     * @param merkleProof A merkle proof proving the claim is valid.\\n     */\\n    function claimTokens(address recipient, uint256 amount, bytes32[] calldata merkleProof) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, amount));\\n        (bool valid, uint256 index) = MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n        require(valid, \\\"MerkleAirdrop: Valid proof required.\\\");\\n        require(!isClaimed(index), \\\"MerkleAirdrop: Tokens already claimed.\\\");\\n        \\n        claimed.set(index);\\n        emit Claim(recipient, amount);\\n\\n        token.transferFrom(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Returns true if the claim at the given index in the merkle tree has already been made.\\n     * @param index The index into the merkle tree.\\n     */\\n    function isClaimed(uint256 index) public view returns (bool) {\\n        return claimed.get(index);\\n    }\\n}\\n\",\"keccak256\":\"0x0f8456b084d2c4ff40ea025700410e3d5bf74060912972ea41bd2743641d5fa7\",\"license\":\"MIT\"},\"contracts/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/cryptography/MerkleProof.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool, uint256) {\\n        bytes32 computedHash = leaf;\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            index *= 2;\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n                index += 1;\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return (computedHash == root, index);\\n    }\\n}\",\"keccak256\":\"0xa85f98445371133a7b2b52f81beb7a069a866605bdf81e09263aa15e53198e92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001383380380620013838339818101604052810190620000379190620001e7565b620000576200004b620000d660201b60201c565b620000de60201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060c08181525050505050620002e8565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001b3816200029a565b92915050565b600081519050620001ca81620002b4565b92915050565b600081519050620001e181620002ce565b92915050565b60008060006060848603121562000203576200020262000295565b5b60006200021386828701620001a2565b93505060206200022686828701620001d0565b92505060406200023986828701620001b9565b9150509250925092565b6000620002508262000275565b9050919050565b6000819050919050565b60006200026e8262000243565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620002a58162000243565b8114620002b157600080fd5b50565b620002bf8162000257565b8114620002cb57600080fd5b50565b620002d98162000261565b8114620002e557600080fd5b50565b60805160601c60a05160601c60c0516110506200033360003960008181610179015261030401526000818161041a01526105eb01526000818161019d015261045601526110506000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639e34070f1161005b5780639e34070f146100f1578063cfb4a1fc14610121578063f2fde38b1461013d578063fc0c546a1461015957610088565b80632eb4a7ab1461008d57806367e404ce146100ab578063715018a6146100c95780638da5cb5b146100d3575b600080fd5b610095610177565b6040516100a29190610ba0565b60405180910390f35b6100b361019b565b6040516100c09190610b33565b60405180910390f35b6100d16101bf565b005b6100db610247565b6040516100e89190610b33565b60405180910390f35b61010b60048036038101906101069190610992565b610270565b6040516101189190610b85565b60405180910390f35b61013b600480360381019061013691906108f1565b61028d565b005b610157600480360381019061015291906108c4565b6104f1565b005b6101616105e9565b60405161016e9190610bbb565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6101c761060d565b73ffffffffffffffffffffffffffffffffffffffff166101e5610247565b73ffffffffffffffffffffffffffffffffffffffff161461023b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023290610c36565b60405180910390fd5b6102456000610615565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006102868260016106d990919063ffffffff16565b9050919050565b600084846040516020016102a2929190610adb565b604051602081830303815290604052805190602001209050600080610329858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f000000000000000000000000000000000000000000000000000000000000000085610715565b915091508161036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490610bd6565b60405180910390fd5b61037681610270565b156103b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ad90610c16565b60405180910390fd5b6103ca8160016107f190919063ffffffff16565b8673ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4876040516104109190610c56565b60405180910390a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000089896040518463ffffffff1660e01b815260040161049593929190610b4e565b602060405180830381600087803b1580156104af57600080fd5b505af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610965565b5050505050505050565b6104f961060d565b73ffffffffffffffffffffffffffffffffffffffff16610517610247565b73ffffffffffffffffffffffffffffffffffffffff161461056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610c36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490610bf6565b60405180910390fd5b6105e681610615565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b60008060008390506000805b87518110156107de576002826107379190610cd8565b9150600088828151811061074e5761074d610e6a565b5b6020026020010151905080841161078f578381604051602001610772929190610b07565b6040516020818303038152906040528051906020012093506107ca565b80846040516020016107a2929190610b07565b6040516020818303038152906040528051906020012093506001836107c79190610c82565b92505b5080806107d690610dba565b915050610721565b5085821481935093505050935093915050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b60008135905061083e81610fd5565b92915050565b60008083601f84011261085a57610859610e9e565b5b8235905067ffffffffffffffff81111561087757610876610e99565b5b60208301915083602082028301111561089357610892610ea3565b5b9250929050565b6000815190506108a981610fec565b92915050565b6000813590506108be81611003565b92915050565b6000602082840312156108da576108d9610ead565b5b60006108e88482850161082f565b91505092915050565b6000806000806060858703121561090b5761090a610ead565b5b60006109198782880161082f565b945050602061092a878288016108af565b935050604085013567ffffffffffffffff81111561094b5761094a610ea8565b5b61095787828801610844565b925092505092959194509250565b60006020828403121561097b5761097a610ead565b5b60006109898482850161089a565b91505092915050565b6000602082840312156109a8576109a7610ead565b5b60006109b6848285016108af565b91505092915050565b6109c881610d32565b82525050565b6109df6109da82610d32565b610e03565b82525050565b6109ee81610d44565b82525050565b6109fd81610d50565b82525050565b610a14610a0f82610d50565b610e15565b82525050565b610a2381610d84565b82525050565b6000610a36602483610c71565b9150610a4182610ebf565b604082019050919050565b6000610a59602683610c71565b9150610a6482610f0e565b604082019050919050565b6000610a7c602683610c71565b9150610a8782610f5d565b604082019050919050565b6000610a9f602083610c71565b9150610aaa82610fac565b602082019050919050565b610abe81610d7a565b82525050565b610ad5610ad082610d7a565b610e31565b82525050565b6000610ae782856109ce565b601482019150610af78284610ac4565b6020820191508190509392505050565b6000610b138285610a03565b602082019150610b238284610a03565b6020820191508190509392505050565b6000602082019050610b4860008301846109bf565b92915050565b6000606082019050610b6360008301866109bf565b610b7060208301856109bf565b610b7d6040830184610ab5565b949350505050565b6000602082019050610b9a60008301846109e5565b92915050565b6000602082019050610bb560008301846109f4565b92915050565b6000602082019050610bd06000830184610a1a565b92915050565b60006020820190508181036000830152610bef81610a29565b9050919050565b60006020820190508181036000830152610c0f81610a4c565b9050919050565b60006020820190508181036000830152610c2f81610a6f565b9050919050565b60006020820190508181036000830152610c4f81610a92565b9050919050565b6000602082019050610c6b6000830184610ab5565b92915050565b600082825260208201905092915050565b6000610c8d82610d7a565b9150610c9883610d7a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ccd57610ccc610e3b565b5b828201905092915050565b6000610ce382610d7a565b9150610cee83610d7a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d2757610d26610e3b565b5b828202905092915050565b6000610d3d82610d5a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d8f82610d96565b9050919050565b6000610da182610da8565b9050919050565b6000610db382610d5a565b9050919050565b6000610dc582610d7a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df857610df7610e3b565b5b600182019050919050565b6000610e0e82610e1f565b9050919050565b6000819050919050565b6000610e2a82610eb2565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008160601b9050919050565b7f4d65726b6c6541697264726f703a2056616c69642070726f6f6620726571756960008201527f7265642e00000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4d65726b6c6541697264726f703a20546f6b656e7320616c726561647920636c60008201527f61696d65642e0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610fde81610d32565b8114610fe957600080fd5b50565b610ff581610d44565b811461100057600080fd5b50565b61100c81610d7a565b811461101757600080fd5b5056fea2646970667358221220d22d0ccdd9d891584563d3de43a9db247ee1e86a8c379a34a2ee3f816aa322be64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639e34070f1161005b5780639e34070f146100f1578063cfb4a1fc14610121578063f2fde38b1461013d578063fc0c546a1461015957610088565b80632eb4a7ab1461008d57806367e404ce146100ab578063715018a6146100c95780638da5cb5b146100d3575b600080fd5b610095610177565b6040516100a29190610ba0565b60405180910390f35b6100b361019b565b6040516100c09190610b33565b60405180910390f35b6100d16101bf565b005b6100db610247565b6040516100e89190610b33565b60405180910390f35b61010b60048036038101906101069190610992565b610270565b6040516101189190610b85565b60405180910390f35b61013b600480360381019061013691906108f1565b61028d565b005b610157600480360381019061015291906108c4565b6104f1565b005b6101616105e9565b60405161016e9190610bbb565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6101c761060d565b73ffffffffffffffffffffffffffffffffffffffff166101e5610247565b73ffffffffffffffffffffffffffffffffffffffff161461023b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023290610c36565b60405180910390fd5b6102456000610615565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006102868260016106d990919063ffffffff16565b9050919050565b600084846040516020016102a2929190610adb565b604051602081830303815290604052805190602001209050600080610329858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f000000000000000000000000000000000000000000000000000000000000000085610715565b915091508161036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490610bd6565b60405180910390fd5b61037681610270565b156103b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ad90610c16565b60405180910390fd5b6103ca8160016107f190919063ffffffff16565b8673ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4876040516104109190610c56565b60405180910390a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000089896040518463ffffffff1660e01b815260040161049593929190610b4e565b602060405180830381600087803b1580156104af57600080fd5b505af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610965565b5050505050505050565b6104f961060d565b73ffffffffffffffffffffffffffffffffffffffff16610517610247565b73ffffffffffffffffffffffffffffffffffffffff161461056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610c36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490610bf6565b60405180910390fd5b6105e681610615565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b60008060008390506000805b87518110156107de576002826107379190610cd8565b9150600088828151811061074e5761074d610e6a565b5b6020026020010151905080841161078f578381604051602001610772929190610b07565b6040516020818303038152906040528051906020012093506107ca565b80846040516020016107a2929190610b07565b6040516020818303038152906040528051906020012093506001836107c79190610c82565b92505b5080806107d690610dba565b915050610721565b5085821481935093505050935093915050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b60008135905061083e81610fd5565b92915050565b60008083601f84011261085a57610859610e9e565b5b8235905067ffffffffffffffff81111561087757610876610e99565b5b60208301915083602082028301111561089357610892610ea3565b5b9250929050565b6000815190506108a981610fec565b92915050565b6000813590506108be81611003565b92915050565b6000602082840312156108da576108d9610ead565b5b60006108e88482850161082f565b91505092915050565b6000806000806060858703121561090b5761090a610ead565b5b60006109198782880161082f565b945050602061092a878288016108af565b935050604085013567ffffffffffffffff81111561094b5761094a610ea8565b5b61095787828801610844565b925092505092959194509250565b60006020828403121561097b5761097a610ead565b5b60006109898482850161089a565b91505092915050565b6000602082840312156109a8576109a7610ead565b5b60006109b6848285016108af565b91505092915050565b6109c881610d32565b82525050565b6109df6109da82610d32565b610e03565b82525050565b6109ee81610d44565b82525050565b6109fd81610d50565b82525050565b610a14610a0f82610d50565b610e15565b82525050565b610a2381610d84565b82525050565b6000610a36602483610c71565b9150610a4182610ebf565b604082019050919050565b6000610a59602683610c71565b9150610a6482610f0e565b604082019050919050565b6000610a7c602683610c71565b9150610a8782610f5d565b604082019050919050565b6000610a9f602083610c71565b9150610aaa82610fac565b602082019050919050565b610abe81610d7a565b82525050565b610ad5610ad082610d7a565b610e31565b82525050565b6000610ae782856109ce565b601482019150610af78284610ac4565b6020820191508190509392505050565b6000610b138285610a03565b602082019150610b238284610a03565b6020820191508190509392505050565b6000602082019050610b4860008301846109bf565b92915050565b6000606082019050610b6360008301866109bf565b610b7060208301856109bf565b610b7d6040830184610ab5565b949350505050565b6000602082019050610b9a60008301846109e5565b92915050565b6000602082019050610bb560008301846109f4565b92915050565b6000602082019050610bd06000830184610a1a565b92915050565b60006020820190508181036000830152610bef81610a29565b9050919050565b60006020820190508181036000830152610c0f81610a4c565b9050919050565b60006020820190508181036000830152610c2f81610a6f565b9050919050565b60006020820190508181036000830152610c4f81610a92565b9050919050565b6000602082019050610c6b6000830184610ab5565b92915050565b600082825260208201905092915050565b6000610c8d82610d7a565b9150610c9883610d7a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ccd57610ccc610e3b565b5b828201905092915050565b6000610ce382610d7a565b9150610cee83610d7a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d2757610d26610e3b565b5b828202905092915050565b6000610d3d82610d5a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d8f82610d96565b9050919050565b6000610da182610da8565b9050919050565b6000610db382610d5a565b9050919050565b6000610dc582610d7a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df857610df7610e3b565b5b600182019050919050565b6000610e0e82610e1f565b9050919050565b6000819050919050565b6000610e2a82610eb2565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008160601b9050919050565b7f4d65726b6c6541697264726f703a2056616c69642070726f6f6620726571756960008201527f7265642e00000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4d65726b6c6541697264726f703a20546f6b656e7320616c726561647920636c60008201527f61696d65642e0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610fde81610d32565b8114610fe957600080fd5b50565b610ff581610d44565b811461100057600080fd5b50565b61100c81610d7a565b811461101757600080fd5b5056fea2646970667358221220d22d0ccdd9d891584563d3de43a9db247ee1e86a8c379a34a2ee3f816aa322be64736f6c63430008070033",
  "devdoc": {
    "details": "A contract to allow users to claim tokens via a 'merkle airdrop'.",
    "kind": "dev",
    "methods": {
      "claimTokens(address,uint256,bytes32[])": {
        "details": "Claims airdropped tokens.",
        "params": {
          "amount": "The amount of the claim being made.",
          "merkleProof": "A merkle proof proving the claim is valid.",
          "recipient": "The account being claimed for."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_sender": "The account to send airdrop tokens from.",
          "_token": "The token contract to send tokens with."
        }
      },
      "isClaimed(uint256)": {
        "details": "Returns true if the claim at the given index in the merkle tree has already been made.",
        "params": {
          "index": "The index into the merkle tree."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5011,
        "contract": "contracts/MerkleAirdrop.sol:MerkleAirdrop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11958,
        "contract": "contracts/MerkleAirdrop.sol:MerkleAirdrop",
        "label": "claimed",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(BitMap)11074_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BitMap)11074_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 11073,
            "contract": "contracts/MerkleAirdrop.sol:MerkleAirdrop",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
